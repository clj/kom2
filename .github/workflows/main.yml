name: Go package

on: [push]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            output: kom2-linux-arm64.so
            env: CGO_ENABLED=1 GOARCH=arm64 CC=/opt/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc CGO_CFLAGS=-I/opt/unixODBC-2.3.11/include CGO_LDFLAGS=-L/opt/unixODBC-2.3.11/lib
            arch: arm64
            test: false
          - os: ubuntu-latest
            output: kom2-linux-amd64.so
            env: CGO_ENABLED=1 GOARCH=amd64
            arch: amd64
            test: true
          - os: macos-latest
            output: kom2-macos-arm64.dylib
            env: CGO_ENABLED=1 GOARCH=arm64
            arch: arm64
            test: false
          - os: macos-latest
            output: kom2-macos-amd64.dylib
            env: CGO_ENABLED=1 GOARCH=amd64
            arch: amd64
            test: true
          - os: windows-latest
            output: kom2-windows-amd64.dll
            installer: kom2-windows-amd64.exe
            test: true

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.x'

      - name: Install dependencies
        run: |
          go get .

      - name: Get build date
        run: |
          echo "timestamp=$(date -Iseconds)" >> "$GITHUB_ENV"

      - name: Get release tag name
        run: |
          echo "release_name=$(echo ${{ github.ref_name }} | cut -d- -f2)" >> "$GITHUB_ENV"
        if: startsWith(github.ref_name, 'release-')

      - name: Install arm64 unixodbc for macOS arm64 build
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          brew fetch --force --bottle-tag=arm64_monterey unixodbc
          HOMEBREW_NO_INSTALL_CLEANUP=1 brew reinstall $(brew --cache --bottle-tag=arm64_monterey unixodbc)

      - name: Install arm64 cross compiler and unixodbc on linux
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          curl -sLO https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xf aarch64-linux-musl-cross.tgz -C /opt
          curl -sLO https://github.com/lurcher/unixODBC/releases/download/2.3.11/unixODBC-2.3.11.tar.gz
          mkdir -p /opt/src
          tar -xf unixODBC-2.3.11.tar.gz -C /opt/src
          cd /opt/src/unixODBC-2.3.11
          ./configure CC=/opt/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc \
            --build=x86_64-linux-gnu \
            --host=aarch64-linux-gnu \
            --target=aarch64-linux-gnu \
            --prefix=/opt/unixODBC-2.3.11 && make && make install

      - name: Install go-winres
        if: matrix.os == 'windows-latest'
        run: go install github.com/tc-hib/go-winres@latest

      - name: Build
        run: ${{ matrix.env }} ./build.sh -o ${{ matrix.output }} -tags odbcinst -ldflags "-s -w -X main.Version=${{ env.release_name }} -X main.BuildDate=${{ env.timestamp }} -X main.Commit=${{ github.sha }}"

      - name: Create Windows installer
        if: matrix.os == 'windows-latest'
        uses: joncloud/makensis-action@v4
        with:
          script-file: "kom2.nsi"
          arguments: "/V4 /DDLL=${{ matrix.output }} /DOUTFILE=${{ matrix.installer }}"

      - name: Install test dependencies
        run: pip3 install -r requirements-testing.txt
        if: matrix.test == true

      - name: Run tests
        run: KOM2_DRIVER_NAME=./${{ matrix.output }} KOM2_DRIVER_LIBRARY=./${{ matrix.output }} pytest
        if: matrix.test == true && matrix.os != 'windows-latest'

      - name: Run tests (Windows)
        run: KOM2_DRIVER_NAME=kom2 KOM2_DRIVER_LIBRARY=./${{ matrix.output }} pytest
        if: matrix.test == true && matrix.os == 'windows-latest'

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            *.dll
            *.so
            *.dylib
            *.exe

  release:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3

      - name: Get release tag name
        run: |
          echo "release_name=$(echo ${{ github.ref_name }} | cut -d- -f2)" >> "$GITHUB_ENV"
        if: startsWith(github.ref_name, 'release-')

      - name: Get current commit sha
        run: |
          echo "release_name=$(echo ${{ github.sha }} | cut -c 1-8)" >> "$GITHUB_ENV"
        if: |
          ! startsWith(github.ref_name, 'release-')

      - name: Package
        run: ./package.sh artifact/ ${{ env.release_name }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ github.workspace }}/release-notes/${{ env.release_name }}.md
          files: |
            artifact/kicad-odbc-middleware2-*.zip
            artifact/kicad-odbc-middleware2-*.exe
          fail_on_unmatched_files: true
        if: startsWith(github.ref_name, 'release-')

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-release
          path: |
            artifact/kicad-odbc-middleware2-*.zip
            artifact/kicad-odbc-middleware2-*.exe
